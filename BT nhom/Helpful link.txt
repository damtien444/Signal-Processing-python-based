https://stackoverflow.com/questions/16207890/fitting-parabolic-shape-to-data-is-it-possible-to-use-logic-statements-with-sci

https://www.coursera.org/lecture/audio-signal-processing/f0-detection-c7o1c

https://www.baeldung.com/cs/signal-peak-detection

import numpy as np
import matplotlib.pyplot as plt 
from scipy.io import wavfile

%matplotlib tk


WINDOW_SIZE = 1000

# data = np.sin(2*np.pi*6*time) + np.random.randn(len(time))

sampling_rate, data = wavfile.read('lab_female.wav')

rectangular_window = np.ones(WINDOW_SIZE)

# Based on the symmetry characteristic of signal, we can remove the second half of FFT values and frequency bins
# get only the real fft 
fourier_transform = np.fft.fft(data[12240: 12240+WINDOW_SIZE], n=1024)

# To get the power of the fft transform
abs_fourier_transform = np.abs(fourier_transform)

# Normalize the data to get better recognition of the big frequency
power_spectrum = np.square(abs_fourier_transform)

baseline = baseline_gen(power_spectrum)

peakList = noisy_peak_finding(power_spectrum, baseline)

frequency = np.linspace(0, sampling_rate/1, num=len(power_spectrum))

plt.plot(frequency, power_spectrum)

plt.plot([frequency[peakList[i]] for i in range(len(peakList))],
         [power_spectrum[peakList[i]] for i in range(len(peakList))],
        'o')
    
